{"version":3,"sources":["actions/types.js","reducers/searchParamsReducer.js","reducers/jobDataReducer.js","reducers/userLocationReducer.js","reducers/jobsLoadingReducer.js","reducers/sortedJobDataReducer.js","reducers/jobFilterReducer.js","reducers/jobSelectedReducer.js","reducers/index.js","history.js","countryCodes.js","actions/searchParams.js","general/returnWholeNumber.js","actions/sort.js","actions/jobRequests.js","components/Dropdown/Dropdown.js","components/Header/requests.js","components/SelectBox/index.js","components/formInputs/TextInput.js","general/staticDropdownOptions.js","components/Header/Header.js","views/Homepage/Filters/Filters.js","actions/jobFilters.js","components/JobCard/JobCard.js","actions/jobSelected.js","components/Pagination/functions.js","components/Pagination/Pagination.js","views/Homepage/Results/Results.js","views/Homepage/index.js","actions/userLocation.js","views/DescriptionPage/index.js","App.js","index.js"],"names":["types","UPDATE_SEARCH_PARAM","UPDATE_COUNTRY_CODE","FETCH_JOB_DATA","FETCH_USER_LOCATION","LOAD_JOBS","SORT_BY_DATE","SORT_BY_MAX_SALARY","GET_UNSORTED_DATA","TURN_ON_FILTER","TURN_OFF_FILTER","SELECT_JOB","CLEAR_JOB_SELECTED","searchParams","country","what","company","where","salary_min","salary_max","full_time","part_time","searchParamsReducer","state","action","type","payload","param","value","jobDataReducer","userLocationReducer","jobsLoadingReducer","sortedJobDataReducer","jobFilterReducer","jobSelectedReducer","combineReducers","jobData","userLocation","jobsLoading","sortedJobData","jobFilter","jobSelected","createBrowserHistory","countryCodes","updateSearchParam","updateCountryCode","code","toLowerCase","includes","returnWholeNumber","number","newNumber","replace","Math","round","sortByDate","dispatch","getState","a","newJobData","sort","b","created","sortByMaxSalary","maxSalary","loadJobs","boolean","fetchJobData","urlString","createUrlString","axios","get","response","results","createJobResults","data","searchParamsObject","allParams","Object","keys","process","i","length","paramValue","responseData","resultsArray","jobInfo","display_name","companyName","description","title","id","jobLocation","location","minSalary","contract_time","contractTime","redirectUrl","redirect_url","categoryTag","category","tag","jobObject","moment","valueOf","area","push","Dropdown","renderedItems","items","onItemClick","map","item","index","className","onClick","e","fetchLocationOptions","locationValue","headers","params","namePrefix","createLocationOptions","result","console","log","amountFetched","city","regionCode","countryCode","SelectBox","selectBoxRef","useRef","useState","openSelectOptions","setOpenSelectOptions","screenTitle","setScreenTitle","useEffect","renderSelectOptions","current","contains","target","document","body","addEventListener","removeEventListener","ref","TextInput","onChange","name","placeholder","onInput","jobs","companies","locations","Header","jobInputRef","companyInputRef","locationInputRef","useDispatch","showDropdownFor","setShowDropdownFor","locationChoices","setLocationChoices","setLocationValue","debouncedLocationValue","setDebouncedLocationValue","useSelector","renderDropdown","every","timerId","setTimeout","clearInterval","getLocationOptions","paramName","dropTitle","dropItems","stopPropagation","onSubmit","preventDefault","history","Filters","showFiltersButton","setShowFiltersButton","showHideFiltersButton","setShowHideFiltersButton","onWindowResize","srcElement","innerWidth","window","htmlFor","defaultChecked","JobCard","titleUrl","momentCreated","format","referenceId","selectedJob","find","job","checkStartRange","startRange","endRange","totalPageButtons","pageButtonsLimit","turnRangeToArray","range","start","end","Pagination","dataLimit","cardComponent","currentPageButton","DataCard","ceil","pageButton","setPageButton","renderedData","firstItemIndex","lastItemIndex","singleData","getPaginatedData","Fragment","renderedPagesRange","initialEndRange","diff","newStartRange","newEndRange","getPaginatedPagesRange","pageNumber","isSelected","updateButtonFunction","goToPageButton","updateHistorySpecific","previousPageButton","goToPreviousPageButton","updateHistoryBackward","nextPageButton","goToNextPageButton","updateHistoryForward","Results","Homepage","ownProps","match","page","getInitialValues","ipifyResponse","ipAddress","ip","ipapiResponse","regionName","DescriptionPage","momentFromNow","fromNow","href","rel","App","path","exact","component","props","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combinedReducers","applyMiddleware","ReduxThunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.be05562c.chunk.js","sourcesContent":["const types = {\n  UPDATE_SEARCH_PARAM: \"UPDATE_SEARCH_PARAM\",\n  UPDATE_COUNTRY_CODE: \"UPDATE_COUNTRY_CODE\",\n  FETCH_JOB_DATA: \"FETCH_JOB_DATA\",\n  FETCH_USER_LOCATION: \"FETCH_USER_LOCATION\",\n  LOAD_JOBS: \"LOAD_JOBS\",\n  SORT_BY_DATE: \"SORT_BY_DATE\",\n  SORT_BY_MAX_SALARY: \"SORT_BY_MAX_SALARY\",\n  GET_UNSORTED_DATA: \"GET_UNSORTED_DATA\",\n  TURN_ON_FILTER: \"TURN_ON_FILTER\",\n  TURN_OFF_FILTER: \"TURN_OFF_FILTER\",\n  SELECT_JOB: \"SELECT_JOB\",\n  CLEAR_JOB_SELECTED: \"CLEAR_JOB_SELECTED\",\n};\n\nexport default types;\n","import types from \"../actions/types.js\";\n\nconst searchParams = {\n  country: \"us\",\n  what: \"\",\n  company: \"\",\n  where: \"\",\n  salary_min: \"\",\n  salary_max: \"\",\n  full_time: \"\",\n  part_time: \"\",\n};\n\nconst searchParamsReducer = (state = searchParams, action) => {\n  switch (action.type) {\n    case types.UPDATE_SEARCH_PARAM:\n      return {\n        ...state,\n        [action.payload.param]: action.payload.value,\n      };\n    case types.UPDATE_COUNTRY_CODE:\n      return { ...state, country: action.payload.value };\n    default:\n      return state;\n  }\n};\n\nexport default searchParamsReducer;\n","import types from \"../actions/types.js\";\n\nconst jobDataReducer = (state = [], action) => {\n  switch (action.type) {\n    case types.FETCH_JOB_DATA:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default jobDataReducer;\n","import types from \"../actions/types.js\";\n\nconst userLocationReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case types.FETCH_USER_LOCATION:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default userLocationReducer;\n","import types from \"../actions/types.js\";\n\nconst jobsLoadingReducer = (state = null, action) => {\n  switch (action.type) {\n    case types.LOAD_JOBS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default jobsLoadingReducer;\n","import types from \"../actions/types.js\";\n\nconst sortedJobDataReducer = (state = [], action) => {\n  switch (action.type) {\n    case types.FETCH_JOB_DATA:\n      return action.payload;\n    case types.SORT_BY_DATE:\n      return action.payload;\n    case types.SORT_BY_MAX_SALARY:\n      return action.payload;\n    case types.GET_UNSORTED_DATA:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default sortedJobDataReducer;\n","import types from \"../actions/types.js\";\n\nconst jobFilterReducer = (state = null, action) => {\n  switch (action.type) {\n    case types.TURN_ON_FILTER:\n      return action.payload;\n    case types.TURN_OFF_FILTER:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default jobFilterReducer;\n","import types from \"../actions/types.js\";\n\nconst jobSelectedReducer = (state = null, action) => {\n  switch (action.type) {\n    case types.SELECT_JOB:\n      return action.payload;\n    case types.CLEAR_JOB_SELECTED:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default jobSelectedReducer;\n","import { combineReducers } from \"redux\";\n\nimport searchParamsReducer from \"./searchParamsReducer.js\";\nimport jobDataReducer from \"./jobDataReducer.js\";\nimport userLocationReducer from \"./userLocationReducer.js\";\nimport jobsLoadingReducer from \"./jobsLoadingReducer.js\";\nimport sortedJobDataReducer from \"./sortedJobDataReducer.js\";\nimport jobFilterReducer from \"./jobFilterReducer.js\";\nimport jobSelectedReducer from \"./jobSelectedReducer.js\";\n\nexport default combineReducers({\n  searchParams: searchParamsReducer,\n  jobData: jobDataReducer,\n  userLocation: userLocationReducer,\n  jobsLoading: jobsLoadingReducer,\n  sortedJobData: sortedJobDataReducer,\n  jobFilter: jobFilterReducer,\n  jobSelected: jobSelectedReducer,\n});\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","const countryCodes = [\n  \"at\",\n  \"au\",\n  \"br\",\n  \"ca\",\n  \"de\",\n  \"fr\",\n  \"gb\",\n  \"in\",\n  \"it\",\n  \"nl\",\n  \"nz\",\n  \"pl\",\n  \"ru\",\n  \"sg\",\n  \"us\",\n  \"za\",\n];\n\nexport default countryCodes;\n","import types from \"./types.js\";\nimport countryCodes from \"../countryCodes.js\";\n\nconst updateSearchParam = (param, value) => {\n  return {\n    type: types.UPDATE_SEARCH_PARAM,\n    payload: {\n      param,\n      value,\n    },\n  };\n};\n\nconst updateCountryCode = (code) => {\n  code = code.toLowerCase();\n  let value;\n  if (countryCodes.includes(code)) {\n    value = code;\n    //if we don't have access to user's countyCode, use usa.\n  } else {\n    value = \"us\";\n  }\n  return {\n    type: types.UPDATE_COUNTRY_CODE,\n    payload: {\n      param: \"country\",\n      value: value,\n    },\n  };\n};\n\nexport { updateSearchParam, updateCountryCode };\n","const returnWholeNumber = (number) => {\n  const newNumber = number.replace(/,/g, \"\");\n  return Math.round(newNumber);\n};\n\nexport default returnWholeNumber;\n","import types from \"./types.js\";\n\nconst sortJobData = () => {\n  return async (dispatch, getState) => {\n    const jobFilter = getState().jobFilter;\n    switch (jobFilter) {\n      case \"sort_date\":\n        return dispatch(sortByDate());\n      case \"salary_max\":\n        return dispatch(sortByMaxSalary());\n      default:\n        return;\n    }\n  };\n};\n\nconst sortByDate = () => {\n  return async (dispatch, getState) => {\n    const jobData = getState().jobData;\n    const newJobData = [...jobData];\n    newJobData.sort((a, b) => {\n      if (a.created > b.created) {\n        return -1;\n      } else if (b.created > a.created) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    dispatch({\n      type: types.SORT_BY_DATE,\n      payload: newJobData,\n    });\n  };\n};\n\nconst sortByMaxSalary = () => {\n  return async (dispatch, getState) => {\n    const jobData = getState().jobData;\n    const newJobData = [...jobData];\n    newJobData.sort((a, b) => {\n      if (a.maxSalary > b.maxSalary) {\n        return -1;\n      } else if (b.maxSalary > a.maxSalary) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    dispatch({\n      type: types.SORT_BY_MAX_SALARY,\n      payload: newJobData,\n    });\n  };\n};\n\nconst getUnsortedData = () => {\n  return async (dispatch, getState) => {\n    const jobData = getState().jobData;\n    dispatch({\n      type: types.GET_UNSORTED_DATA,\n      payload: jobData,\n    });\n  };\n};\n\nexport { sortJobData, sortByDate, sortByMaxSalary, getUnsortedData };\n","import axios from \"axios\";\nimport moment from \"moment\";\nimport types from \"./types.js\";\nimport apiInfo from \"../apiInfo.js\";\n\nimport returnWholeNumber from \"../general/returnWholeNumber.js\";\nimport { sortJobData } from \"../actions/sort.js\";\n\nconst loadJobs = (boolean) => {\n  return {\n    type: types.LOAD_JOBS,\n    payload: boolean,\n  };\n};\n\nconst fetchJobData = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(loadJobs(true));\n      const searchParams = getState().searchParams;\n      const urlString = createUrlString(searchParams);\n      const response = await axios.get(urlString);\n\n      const results = createJobResults(response.data.results);\n\n      dispatch({\n        type: types.FETCH_JOB_DATA,\n        payload: results,\n      });\n\n      //checks to see if it should sort the data according to any sort by filters\n      dispatch(sortJobData());\n\n      dispatch(loadJobs(false));\n    } catch {\n      dispatch({\n        type: types.FETCH_JOB_DATA,\n        payload: \"error\",\n      });\n\n      dispatch(loadJobs(false));\n    }\n  };\n};\n\nconst createUrlString = (searchParamsObject) => {\n  const allParams = Object.keys(searchParamsObject);\n\n  let urlString = `https://api.adzuna.com/v1/api/jobs/${searchParamsObject.country}/search/1?app_id=${process.env.REACT_APP_ADZUNA_ID}&app_key=${process.env.REACT_APP_ADZUNA_KEY}&results_per_page=100`;\n\n  //create our urlString with the different params that actually have values\n  for (let i = 0; i < allParams.length; i++) {\n    const param = allParams[i];\n    let paramValue = searchParamsObject[param];\n    //searchParam value for salary can't have commas or decimals in it, so we\n    //need to format it first before setting in our url\n    if (param === \"salary_min\" || param === \"salary_max\") {\n      paramValue = returnWholeNumber(paramValue);\n    }\n    if (param === \"country\") {\n      //skip country because it is part of path, not part of query string\n      continue;\n    } else if (paramValue) {\n      urlString += `&${param}=${paramValue}`;\n    }\n  }\n  return urlString;\n};\n\nconst createJobResults = (responseData) => {\n  const resultsArray = [];\n  for (let i = 0; i < responseData.length; i++) {\n    const jobInfo = responseData[i];\n\n    const {\n      company: { display_name: companyName = \"Unknown Company\" },\n      description,\n      title,\n      id,\n      location: { display_name: jobLocation },\n      salary_max: maxSalary = \"\",\n      salary_min: minSalary = \"\",\n      contract_time: contractTime = \"\",\n      redirect_url: redirectUrl,\n      category: { tag: categoryTag },\n    } = jobInfo;\n\n    const created = moment(jobInfo.created).valueOf();\n    const state = jobInfo.location.area[0];\n\n    const jobObject = {\n      companyName,\n      created,\n      description,\n      title,\n      id,\n      state,\n      jobLocation,\n      maxSalary,\n      minSalary,\n      contractTime,\n      redirectUrl,\n      categoryTag,\n    };\n    resultsArray.push(jobObject);\n  }\n  return resultsArray;\n};\n\nexport { fetchJobData, loadJobs };\n","import React from \"react\";\n\nimport \"./Dropdown.scss\";\n\nconst Dropdown = ({ title, items, onItemClick }) => {\n  let renderedItems;\n  if (items && items.length) {\n    renderedItems = items.map((item, index) => {\n      return (\n        <li\n          className=\"Dropdown__item\"\n          key={index}\n          onClick={(e) => {\n            onItemClick(e, item);\n          }}\n        >\n          {item}\n        </li>\n      );\n    });\n  } else if (items && !items.length) {\n    renderedItems = [<p key={1}>No Results Found</p>];\n  }\n\n  return (\n    <div className=\"Dropdown\">\n      <h3 className=\"Dropdown__title\">{title}</h3>\n      <ul className=\"Dropdown__list\">{renderedItems}</ul>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import axios from \"axios\";\nimport countryCodes from \"../../countryCodes.js\";\n\n//fetches location results based on user's location search value\nconst fetchLocationOptions = async (locationValue) => {\n  try {\n    const response = await axios.get(\n      \"https://wft-geo-db.p.rapidapi.com/v1/geo/cities\",\n      {\n        headers: {\n          \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n          \"x-rapidapi-key\":\n            \"f5ccaa0bb8msh63eb609ff46e586p12f55djsn8088bb1da5d6\",\n        },\n        params: { namePrefix: locationValue },\n      }\n    );\n    return createLocationOptions(response.data.data);\n  } catch {\n    return [];\n  }\n};\n\n//creates our array of location options that we want user to choose from\nconst createLocationOptions = (result) => {\n  console.log(result);\n  // we only want 5 items from our results, even if results shows 100\n  let results = [];\n  let i = 0; //i will iterate our result array\n  let amountFetched = 0; //keeps track of the actual items we have collected\n  //while amountFetched is less than 5 and we still have items in our array to iterate\n  while (amountFetched < 5 && i < result.length) {\n    const location = result[i];\n    const { city, regionCode } = location;\n    const countryCode = location.countryCode.toLowerCase();\n    console.log(countryCode);\n    if (countryCodes.includes(countryCode)) {\n      results.push(`${city}, ${regionCode}`);\n      amountFetched += 1;\n    }\n    i++;\n  }\n  console.log(results);\n  return results;\n};\n\nexport { fetchLocationOptions };\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport \"./SelectBox.scss\";\nimport { GiPlainArrow } from \"react-icons/gi\";\n\nconst SelectBox = ({ items, title, value, onItemClick }) => {\n  const selectBoxRef = useRef();\n\n  const [openSelectOptions, setOpenSelectOptions] = useState(false);\n  const [screenTitle, setScreenTitle] = useState(value);\n\n  //adds event listener on our body that closes our select box options when a user\n  //clicks outside of it\n  useEffect(() => {\n    const renderSelectOptions = (e) => {\n      if (selectBoxRef.current && !selectBoxRef.current.contains(e.target)) {\n        setOpenSelectOptions(false);\n      }\n    };\n\n    document.body.addEventListener(\"click\", renderSelectOptions);\n\n    return () => {\n      document.body.removeEventListener(\"click\", renderSelectOptions);\n    };\n  }, []);\n\n  const renderedItems = items.map((item, index) => {\n    return (\n      <li\n        className=\"SelectBox__item\"\n        key={index}\n        onClick={() => {\n          setOpenSelectOptions(false);\n          setScreenTitle(item);\n          onItemClick(item);\n        }}\n      >\n        {item}\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"SelectBox\" ref={selectBoxRef}>\n      <div\n        className=\"SelectBox__screen\"\n        onClick={() => {\n          setOpenSelectOptions(true);\n        }}\n      >\n        <p>{screenTitle}</p>\n        <GiPlainArrow className=\"SelectBox__icon\" />\n      </div>\n      <ul\n        className={`SelectBox__list ${\n          openSelectOptions ? \"\" : \"SelectBox__list--closed\"\n        }`}\n      >\n        <li className=\"SelectBox__invalid-item\">{title}</li>\n        {renderedItems}\n      </ul>\n    </div>\n  );\n};\n\nexport default SelectBox;\n","import React from \"react\";\n\nimport \"./TextInput.scss\";\n\nconst TextInput = ({\n  onClick,\n  onChange,\n  value,\n  name,\n  placeholder,\n  className,\n  onInput,\n}) => {\n  return (\n    <input\n      type=\"text\"\n      className={`TextInput ${className}`}\n      name={name}\n      placeholder={placeholder}\n      onClick={onClick}\n      onChange={onChange}\n      onInput={onInput}\n      value={value}\n    />\n  );\n};\n\nexport default TextInput;\n","const jobs = [\n  \"marketing\",\n  \"sales\",\n  \"product management\",\n  \"design\",\n  \"software engineering\",\n  \"human resources\",\n  \"finance\",\n  \"project management\",\n  \"writing\",\n  \"operations\",\n];\n\nconst companies = [\n  \"google\",\n  \"microsoft\",\n  \"amazon\",\n  \"facebook\",\n  \"tesla\",\n  \"H&M\",\n  \"walmart\",\n  \"toyota\",\n];\n\nconst locations = [\n  \"new york, NY\",\n  \"san francisco, CA\",\n  \"los angeles, CA\",\n  \"boston, MA\",\n  \"washington, DC\",\n  \"Austin, TX\",\n  \"chicago, IL\",\n  \"seattle, WA\",\n  \"atlanta, GA\",\n];\n\nexport { jobs, companies, locations };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { FaRegBuilding } from \"react-icons/fa\";\nimport { IoLocationSharp } from \"react-icons/io5\";\n\nimport \"./Header.scss\";\nimport history from \"../../history.js\";\nimport Dropdown from \"../Dropdown/Dropdown.js\";\nimport { fetchLocationOptions } from \"./requests.js\";\nimport SelectBox from \"../SelectBox\";\nimport countryCodes from \"../../countryCodes.js\";\nimport TextInput from \"../formInputs/TextInput.js\";\nimport {\n  updateSearchParam,\n  updateCountryCode,\n  fetchJobData,\n} from \"../../actions\";\nimport {\n  jobs,\n  companies,\n  locations,\n} from \"../../general/staticDropdownOptions.js\";\n\nconst Header = () => {\n  const jobInputRef = useRef();\n  const companyInputRef = useRef();\n  const locationInputRef = useRef();\n\n  const dispatch = useDispatch();\n\n  const [showDropdownFor, setShowDropdownFor] = useState(null);\n  const [locationChoices, setLocationChoices] = useState(locations);\n  const [locationValue, setLocationValue] = useState(\"\");\n  const [debouncedLocationValue, setDebouncedLocationValue] = useState(\"\");\n\n  const searchParams = useSelector((state) => {\n    return state.searchParams;\n  });\n\n  //adds event listener on our body for closing dropdown component when user\n  //clicks outside of it and outside of the text input that renders the dropdown\n  useEffect(() => {\n    const renderDropdown = (e) => {\n      const refs = [jobInputRef, companyInputRef, locationInputRef];\n      const closeDropdown = refs.every((ref) => {\n        return ref.current && !ref.current.contains(e.target);\n      });\n\n      if (closeDropdown) {\n        setShowDropdownFor(null);\n      }\n    };\n    document.body.addEventListener(\"click\", renderDropdown);\n\n    return () => {\n      document.body.removeEventListener(\"click\", renderDropdown);\n    };\n  }, []);\n\n  //sets debouncedLocationValue after a certain time passes without user typing a\n  //character in order to avoid many requests.\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setDebouncedLocationValue(locationValue);\n    }, 1000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, [locationValue]);\n\n  //fetches suggested location options based on user's debouncedLocationValue\n  useEffect(() => {\n    const getLocationOptions = async () => {\n      const result = await fetchLocationOptions(debouncedLocationValue);\n      setLocationChoices(result);\n    };\n    if (debouncedLocationValue) {\n      getLocationOptions();\n    }\n  }, [debouncedLocationValue]);\n\n  //renders dropdown component for our job search parameters\n  const renderDropdown = (paramName, dropTitle, dropItems) => {\n    if (paramName === showDropdownFor) {\n      return (\n        <Dropdown\n          title={dropTitle}\n          items={dropItems}\n          onItemClick={(e, paramValue) => {\n            dispatch(updateSearchParam(paramName, paramValue));\n            setShowDropdownFor(null);\n            e.stopPropagation();\n          }}\n        />\n      );\n    }\n  };\n\n  return (\n    <header className=\"Header\">\n      <div className=\"container Header__container\">\n        <h1 className=\"logo\">\n          <span className=\"bold\">Eazy-E</span> Postings\n        </h1>\n        <form\n          className=\"form\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            dispatch(fetchJobData());\n            history.push(\"/\");\n          }}\n        >\n          <div\n            className=\"form__input-group\"\n            onClick={() => {\n              setShowDropdownFor(\"what\");\n            }}\n            ref={jobInputRef}\n          >\n            <AiOutlineSearch className=\"form__icon\" />\n            <TextInput\n              className=\"form__input\"\n              name=\"what\"\n              placeholder=\"All jobs\"\n              value={searchParams.what}\n              onChange={(e) => {\n                dispatch(updateSearchParam(\"what\", e.target.value));\n              }}\n            />\n            {renderDropdown(\"what\", \"Popular Job Searches\", jobs)}\n          </div>\n\n          <div\n            className=\"form__input-group\"\n            onClick={() => {\n              setShowDropdownFor(\"company\");\n            }}\n            ref={companyInputRef}\n          >\n            <FaRegBuilding className=\"form__icon\" />\n            <TextInput\n              className=\"form__input\"\n              name=\"company\"\n              placeholder=\"All Companies\"\n              value={searchParams.company}\n              onChange={(e) => {\n                dispatch(updateSearchParam(\"company\", e.target.value));\n              }}\n            />\n            {renderDropdown(\"company\", \"Popular Company Searches\", companies)}\n          </div>\n\n          <div className=\"form__input-group\">\n            <SelectBox\n              title=\"Country\"\n              items={countryCodes}\n              onItemClick={(code) => {\n                dispatch(updateCountryCode(code));\n              }}\n              value={searchParams.country}\n            />\n          </div>\n\n          <div\n            className=\"form__input-group\"\n            onClick={() => {\n              setShowDropdownFor(\"where\");\n            }}\n            ref={locationInputRef}\n          >\n            <IoLocationSharp className=\"form__icon\" />\n            <TextInput\n              className=\"form__input\"\n              name=\"where\"\n              placeholder=\"Anywhere\"\n              value={searchParams.where}\n              onChange={(e) => {\n                setLocationValue(e.target.value);\n                dispatch(updateSearchParam(\"where\", e.target.value));\n              }}\n            />\n            {renderDropdown(\n              \"where\",\n              \"choose or search a location\",\n              locationChoices\n            )}\n          </div>\n\n          <button className=\"button button--primary form__button\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./Filters.scss\";\nimport {\n  updateSearchParam,\n  fetchJobData,\n  sortByDate,\n  sortByMaxSalary,\n  turnOnFilter,\n  turnOffFilter,\n  getUnsortedData,\n} from \"../../../actions/\";\nimport { BsCurrencyDollar } from \"react-icons/bs\";\n\nconst Filters = () => {\n  const dispatch = useDispatch();\n  const [showFiltersButton, setShowFiltersButton] = useState(false);\n  const [showHideFiltersButton, setShowHideFiltersButton] = useState(false);\n\n  useEffect(() => {\n    const onWindowResize = (e) => {\n      if (e.srcElement.innerWidth <= 760) {\n        setShowFiltersButton(true);\n        setShowHideFiltersButton(true);\n      } else {\n        setShowFiltersButton(false);\n        setShowHideFiltersButton(false);\n      }\n    };\n    window.addEventListener(\"resize\", onWindowResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", onWindowResize);\n    };\n  }, []);\n\n  const searchParams = useSelector((state) => {\n    return state.searchParams;\n  });\n\n  const onFilterSelect = (e) => {\n    const value = e.target.value;\n\n    if (value === \"none\") {\n      dispatch(turnOffFilter());\n      dispatch(getUnsortedData());\n      return;\n    }\n\n    dispatch(turnOnFilter(value));\n\n    switch (value) {\n      case \"sort_date\":\n        return dispatch(sortByDate());\n      case \"salary_max\":\n        return dispatch(sortByMaxSalary());\n      default:\n        return;\n    }\n  };\n\n  return (\n    <section className=\"Filters\">\n      {showFiltersButton ? (\n        <button\n          className=\"button-3 button-3--primary text-large Filters__show-button\"\n          onClick={() => {\n            setShowFiltersButton(false);\n          }}\n        >\n          Edit Job Filters\n        </button>\n      ) : null}\n\n      <div\n        className={`Filters__content ${\n          showFiltersButton ? \"Filters__content--hide\" : null\n        }`}\n      >\n        <h2 className=\"Filters__heading text-large-2\">Job Filters</h2>\n        <div className=\"Filters__group\">\n          <p className=\"Filters__group-title\">Sort By:</p>\n          <div className=\"Filters__radios-container\" onChange={onFilterSelect}>\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"filter\"\n                value=\"sort_date\"\n                id=\"sort_date\"\n              />\n              <label htmlFor=\"sort_date\">Date Posted</label>\n            </div>\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"filter\"\n                value=\"salary_max\"\n                id=\"salary_max\"\n              />\n              <label htmlFor=\"salary_max\">Maximum Salary</label>\n            </div>\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"filter\"\n                value=\"none\"\n                id=\"none\"\n                defaultChecked\n              />\n              <label htmlFor=\"none\">None</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"Filters__group\">\n          <p className=\"Filters__group-title\">Salary:</p>\n          <div className=\"Filters__salary-inputs\">\n            <div className=\"Filters__text-input-group\">\n              <BsCurrencyDollar className=\"Filters__icon\" />\n              <input\n                type=\"text\"\n                className=\"Filters__text-input\"\n                name=\"minimum salary\"\n                id=\"minimum-salary\"\n                placeholder=\"Min Salary\"\n                value={searchParams.salary_min}\n                onChange={(e) => {\n                  dispatch(updateSearchParam(\"salary_min\", e.target.value));\n                }}\n              />\n            </div>\n            <div className=\"Filters__text-input-group\">\n              <BsCurrencyDollar className=\"Filters__icon\" />\n              <input\n                type=\"text\"\n                name=\"maximum salary\"\n                className=\"Filters__text-input Filters__text-input-max\"\n                id=\"maximum-salary\"\n                placeholder=\"Max Salary\"\n                value={searchParams.salary_max}\n                onChange={(e) => {\n                  dispatch(updateSearchParam(\"salary_max\", e.target.value));\n                }}\n              />\n            </div>\n            <button\n              className=\"button-2 button-2--primary Filters__button\"\n              onClick={() => {\n                dispatch(fetchJobData());\n              }}\n            >\n              Go\n            </button>\n          </div>\n        </div>\n        <div className=\"Filters__group\">\n          <p className=\"Filters__group-title\">Contract Time:</p>\n          <div\n            className=\"Filters__radios-container\"\n            onChange={(e) => {\n              if (e.target.value === \"part time\") {\n                dispatch(updateSearchParam(\"full_time\", \"\"));\n                dispatch(updateSearchParam(\"part_time\", 1));\n              } else if (e.target.value === \"full time\") {\n                dispatch(updateSearchParam(\"part_time\", \"\"));\n                dispatch(updateSearchParam(\"full_time\", 1));\n              } else if (e.target.value === \"both\") {\n                dispatch(updateSearchParam(\"part_time\", \"\"));\n                dispatch(updateSearchParam(\"full_time\", \"\"));\n              }\n              dispatch(fetchJobData());\n            }}\n          >\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"contract time\"\n                value=\"full time\"\n                id=\"full-time\"\n              />\n              <label htmlFor=\"full-time\">Full Time</label>\n            </div>\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"contract time\"\n                value=\"part time\"\n                id=\"part-time\"\n              />\n              <label htmlFor=\"part-time\">Part Time</label>\n            </div>\n            <div className=\"Filters__radio-group\">\n              <input\n                type=\"radio\"\n                className=\"Filters__radio-button\"\n                name=\"contract time\"\n                value=\"both\"\n                id=\"both\"\n                defaultChecked\n              />\n              <label htmlFor=\"both\">Both</label>\n            </div>\n          </div>\n        </div>\n        {showHideFiltersButton ? (\n          <button\n            className=\"button-3 button-3--primary text-large Filters__hide-button\"\n            onClick={() => {\n              setShowFiltersButton(true);\n            }}\n          >\n            Hide Job Filters\n          </button>\n        ) : null}\n      </div>\n    </section>\n  );\n};\n\nexport default Filters;\n","import types from \"./types.js\";\n\nconst turnOnFilter = (filterName) => {\n  return {\n    type: types.TURN_ON_FILTER,\n    payload: filterName,\n  };\n};\n\nconst turnOffFilter = () => {\n  return {\n    type: types.TURN_OFF_FILTER,\n  };\n};\n\nexport { turnOnFilter, turnOffFilter };\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport { GoGlobe } from \"react-icons/go\";\nimport history from \"../../history.js\";\n\nimport \"./JobCard.scss\";\nimport { selectJob } from \"../../actions\";\n\nconst JobCard = ({ data }) => {\n  const dispatch = useDispatch();\n\n  const {\n    companyName,\n    created,\n    title,\n    jobLocation,\n    maxSalary,\n    minSalary,\n    contractTime,\n    id,\n  } = data;\n\n  const titleUrl = title.replace(/\\s/g, \"-\");\n\n  const renderContract = () => {\n    if (contractTime === \"full_time\") {\n      return \"Full Time\";\n    } else if (contractTime === \"part_time\") {\n      return \"Part Time\";\n    }\n\n    return;\n  };\n\n  const momentCreated = moment(created).format(\"MMM Do, YY\");\n  return (\n    <div\n      className=\"JobCard\"\n      onClick={() => {\n        dispatch(selectJob(id));\n        history.push(`/jobs/${titleUrl}/${id}`);\n      }}\n    >\n      <div className=\"JobCard__main-info\">\n        <p className=\"JobCard__company-name text-regular\">{companyName}</p>\n        <h2 className=\"JobCard__title text-large\">{title}</h2>\n        <div className=\"JobCard__location-contract\">\n          <div className=\"JobCard__location-wrapper\">\n            <GoGlobe className=\"JobCard__icon\" />\n            <p className=\"JobCard__location text-small\">{jobLocation}</p>\n          </div>\n          <p className=\"JobCard__contract text-small\">{renderContract()}</p>\n        </div>\n      </div>\n      <div className=\"JobCard__date-salary\">\n        <p className=\"JobCard__date text-small\">{`Posted on ${momentCreated}`}</p>\n        <div className=\"JobCard__salary-group\">\n          {minSalary ? (\n            <p className=\"JobCard__salary text-small\">{`Min $: ${minSalary}`}</p>\n          ) : null}\n          {maxSalary ? (\n            <p className=\"JobCard__salary text-small\">{`Max $: ${maxSalary}`}</p>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JobCard;\n","import types from \"./types.js\";\n\nconst selectJob = (referenceId) => {\n  return (dispatch, getState) => {\n    const data = getState().sortedJobData;\n    const selectedJob = data.find((job) => job.id === referenceId);\n    dispatch({\n      type: types.SELECT_JOB,\n      payload: selectedJob,\n    });\n  };\n};\n\nconst clearJobSelected = () => {\n  return {\n    type: types.CLEAR_JOB_SELECTED,\n  };\n};\n\nexport { selectJob, clearJobSelected };\n","import history from \"../../history.js\";\n\nconst goToNextPageButton = (\n  totalPageButtons,\n  currentPageButton,\n  updateButtonFunction\n) => {\n  const nextPageButton = currentPageButton + 1;\n  if (nextPageButton >= totalPageButtons) {\n    updateButtonFunction(totalPageButtons);\n  } else {\n    updateButtonFunction(nextPageButton);\n  }\n};\n\nconst updateHistoryForward = (totalPageButtons, currentPageButton) => {\n  const nextPageButton = currentPageButton + 1;\n  if (nextPageButton >= totalPageButtons) {\n    history.push(`/${totalPageButtons}`);\n  } else {\n    history.push(`/${nextPageButton}`);\n  }\n};\n\nconst goToPreviousPageButton = (currentPageButton, updateButtonFunction) => {\n  const previousPageButton = currentPageButton - 1;\n  if (previousPageButton < 1) {\n    updateButtonFunction(1);\n  } else {\n    updateButtonFunction(previousPageButton);\n  }\n};\n\nconst updateHistoryBackward = (currentPageButton) => {\n  const previousPageButton = currentPageButton - 1;\n  if (previousPageButton <= 1) {\n    history.push(\"/\");\n  } else {\n    history.push(`/${previousPageButton}`);\n  }\n};\n\nconst goToPageButton = (totalPageButtons, pageNumber, updateButtonFunction) => {\n  if (pageNumber >= 1 && pageNumber <= totalPageButtons) {\n    updateButtonFunction(pageNumber);\n  }\n};\n\nconst updateHistorySpecific = (totalPageButtons, pageNumber) => {\n  if (pageNumber <= 1) {\n    history.push(`/`);\n  } else if (pageNumber <= totalPageButtons) {\n    history.push(`/${pageNumber}`);\n  }\n};\n\n//will return the posts we should show based on our dataLimit and the current page we are on. *i can call this function and map inside jsx*\nconst getPaginatedData = (data, currentPageButton, dataLimit) => {\n  const firstItemIndex = currentPageButton * dataLimit - (dataLimit - 1) - 1;\n  let lastItemIndex = currentPageButton * dataLimit - 1;\n  if (lastItemIndex >= data.length) {\n    lastItemIndex = data.length - 1;\n  }\n  const results = [];\n  for (let i = firstItemIndex; i <= lastItemIndex; i++) {\n    const singleData = data[i];\n    results.push(singleData);\n  }\n  return results;\n};\n\n// I will show a max of 5 page buttons at a time, and only after page button 3 is when the pages range change.*i can call this function and map inside jsx*\nconst getPaginatedPagesRange = (\n  totalPageButtons,\n  pageButtonsLimit,\n  pageButton\n) => {\n  //get initial base range to work from\n  const initialStartRange = 1;\n  let initialEndRange;\n  if (totalPageButtons <= pageButtonsLimit) {\n    initialEndRange = totalPageButtons;\n  } else {\n    initialEndRange = pageButtonsLimit;\n  }\n  //if we havent selected past the 3rd page button or if initialEndRange ends at  three pageButtonsLimit, just return our initial ranges\n  if (initialEndRange <= 3 || pageButton <= 3) {\n    return turnRangeToArray([initialStartRange, initialEndRange]);\n  }\n\n  //if initialEndRange is greater than 3 and we select a page button greater than 3\n  //then we can update our range. Let's say we have a range from 1-4\n  if (initialEndRange > 3 && pageButton > 3) {\n    // find the new pageButton difference from 3\n    const diff = pageButton - 3;\n    // move the startRange up this amount\n    let newStartRange = initialStartRange + diff;\n    // move the endRange up this amount\n    let newEndRange = initialEndRange + diff;\n    // if newEndRange exceeds or equals the total number of page buttons,then the newEndRange should just equal the total number of page buttons.\n    if (newEndRange >= totalPageButtons) {\n      newEndRange = totalPageButtons;\n    }\n\n    //we want to update our startRange to make sure we are showing pageButtonsLimit at once, if possibile or totalpageButtons otherwise.\n    newStartRange = checkStartRange(\n      newStartRange,\n      newEndRange,\n      totalPageButtons,\n      pageButtonsLimit\n    );\n\n    return turnRangeToArray([newStartRange, newEndRange]);\n  }\n};\n\n//updates startRange\nconst checkStartRange = (\n  startRange,\n  endRange,\n  totalPageButtons,\n  pageButtonsLimit\n) => {\n  //if the total number of page buttons is greater than our pageButtonsLimit, this\n  // means we will always be able to show pageButtonsLimit at one time. so if the\n  // limit is 5, we will always be able to show five buttons at once, so we\n  // decrease our start range till we are showing pageButtonsLimit amount\n  if (totalPageButtons >= pageButtonsLimit) {\n    while (endRange - startRange + 1 !== pageButtonsLimit) {\n      startRange = startRange - 1;\n    }\n    //if the total page buttons is less than our pageButtonsLimit, that means we\n    // just want to decrease startRange until we have same number of buttons as\n    // totalPageButtons\n  } else {\n    while (endRange - startRange + 1 !== totalPageButtons) {\n      startRange = startRange - 1;\n    }\n  }\n  return startRange;\n};\n\nconst turnRangeToArray = (range) => {\n  let result = [];\n  let start = range[0];\n  let end = range[1];\n  for (let i = start; i <= end; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nexport {\n  goToNextPageButton,\n  goToPreviousPageButton,\n  goToPageButton,\n  getPaginatedData,\n  getPaginatedPagesRange,\n  updateHistoryForward,\n  updateHistoryBackward,\n  updateHistorySpecific,\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  goToNextPageButton,\n  goToPreviousPageButton,\n  goToPageButton,\n  getPaginatedData,\n  getPaginatedPagesRange,\n  updateHistoryForward,\n  updateHistoryBackward,\n  updateHistorySpecific,\n} from \"./functions.js\";\n\nimport { BiLeftArrow, BiRightArrow } from \"react-icons/bi\";\n\nimport \"./Pagination.scss\";\n\nconst Pagination = ({\n  data,\n  pageButtonsLimit,\n  dataLimit,\n  cardComponent,\n  currentPageButton,\n}) => {\n  //totalPageButtons tells us the total number of totalPageButtons we will need to store our data. We do Math.ceil because any decimal in regards to pages means round up\n  const DataCard = cardComponent;\n\n  const [totalPageButtons] = useState(Math.ceil(data.length / dataLimit));\n\n  const [pageButton, setPageButton] = useState(currentPageButton);\n\n  //when our currentPageButton prop changes,update our pageButton state for when our component re-renders, so the right results can be fetched\n  useEffect(() => {\n    setPageButton(currentPageButton);\n  }, [currentPageButton]);\n\n  const renderedData = getPaginatedData(data, pageButton, dataLimit).map(\n    (job, index) => {\n      return (\n        <React.Fragment key={index}>\n          <DataCard data={job} />\n        </React.Fragment>\n      );\n    }\n  );\n\n  const renderedPagesRange = getPaginatedPagesRange(\n    totalPageButtons,\n    pageButtonsLimit,\n    pageButton\n  ).map((pageNumber, index) => {\n    const isSelected = pageButton === pageNumber;\n    return (\n      <button\n        key={index}\n        className={`button-3 button-3--primary Pagination__button ${\n          isSelected ? \"Pagination__button--selected\" : null\n        }`}\n        onClick={() => {\n          goToPageButton(totalPageButtons, pageNumber, setPageButton);\n          updateHistorySpecific(totalPageButtons, pageNumber);\n        }}\n      >\n        {pageNumber}\n      </button>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"Pagination__data\">{renderedData}</div>\n      <div className=\"Pagination__page-group\">\n        <BiLeftArrow\n          className=\"Pagination__icon Pagination__button\"\n          onClick={() => {\n            goToPreviousPageButton(pageButton, setPageButton);\n            updateHistoryBackward(pageButton);\n          }}\n        />\n        {renderedPagesRange}\n        <BiRightArrow\n          className=\"Pagination__icon Pagination__button \"\n          onClick={() => {\n            goToNextPageButton(totalPageButtons, pageButton, setPageButton);\n            updateHistoryForward(totalPageButtons, pageButton);\n          }}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport JobCard from \"../../../components/JobCard/JobCard.js\";\nimport \"./Results.scss\";\nimport Pagination from \"../../../components/Pagination/Pagination.js\";\n\nconst Results = ({ currentPageButton }) => {\n  const jobData = useSelector((state) => {\n    return state.sortedJobData;\n  });\n\n  const jobsLoading = useSelector((state) => {\n    return state.jobsLoading;\n  });\n\n  const renderData = () => {\n    if (jobsLoading === true || jobsLoading === null) {\n      return (\n        <p className=\"Results__fetching-jobs text-large\">\n          Fetching jobs that match your criteria. Hold on, this might take a\n          while...\n        </p>\n      );\n    }\n\n    if (jobData === \"error\") {\n      return (\n        <p className=\"Results__error text-large\">\n          There was a problem retrieving job data. Try Again.\n        </p>\n      );\n    }\n\n    if (!jobData.length) {\n      return <p className=\"Results__none text-large\">No results found.</p>;\n    }\n\n    //return our pagination component which shows our data a certain amount at a time. The data it is showing is our cardComponent\n    return (\n      <Pagination\n        data={jobData}\n        pageButtonsLimit={5}\n        dataLimit={7}\n        cardComponent={JobCard}\n        currentPageButton={currentPageButton}\n      ></Pagination>\n    );\n  };\n\n  return <section className=\"Results text-large\">{renderData()}</section>;\n};\n\nexport default Results;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchJobData, fetchUserLocation } from \"../../actions\";\nimport Header from \"../../components/Header/Header.js\";\nimport Filters from \"./Filters/Filters.js\";\nimport Results from \"./Results/Results.js\";\n\nimport \"./index.scss\";\nconst Homepage = (ownProps) => {\n  //the current page button we are on of our pagination, taken from the url. If nothing is in url, we will assume that we are on the first page.\n  let currentPageButton;\n  if (!ownProps.match.params.page) {\n    currentPageButton = 1;\n  } else {\n    currentPageButton = +ownProps.match.params.page;\n  }\n\n  const dispatch = useDispatch();\n\n  const sortedJobData = useSelector((state) => {\n    return state.sortedJobData;\n  });\n\n  useEffect(() => {\n    const getInitialValues = async () => {\n      await dispatch(fetchUserLocation());\n      dispatch(fetchJobData());\n    };\n\n    if (!sortedJobData.length) {\n      getInitialValues();\n    }\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <main className=\"Homepage\">\n        <div className=\"container\">\n          <Filters />\n          <Results currentPageButton={currentPageButton} />\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Homepage;\n","import types from \"./types.js\";\nimport axios from \"axios\";\n\nimport countryCodes from \"../countryCodes.js\";\nimport { updateCountryCode, updateSearchParam } from \"./searchParams.js\";\n\n//gets where the user is located right when app loads, so we can make a request\n//with this initial information.\nconst fetchUserLocation = () => {\n  return async (dispatch) => {\n    try {\n      //gets user's ip address\n      const ipifyResponse = await axios.get(\n        \"https://api.ipify.org?format=json\"\n      );\n\n      const ipAddress = ipifyResponse.data.ip;\n\n      //gets info related to user's ip address\n      const ipapiResponse = await axios.get(\n        `http://ip-api.com/json/${ipAddress}`\n      );\n\n      const { city, regionName } = ipapiResponse.data;\n      const countryCode = ipapiResponse.data.countryCode.toLowerCase();\n\n      //if user's countryCode isn't among the ones we can access data from,\n      //set their location to Los Angeles,CA and update that in the search param\n      //so we can make our request with that info\n      if (!countryCodes.includes(countryCode)) {\n        dispatch({\n          type: types.FETCH_USER_LOCATION,\n          payload: `Los Angeles, California`,\n        });\n        dispatch(updateSearchParam(\"where\", `Los Angeles, California`));\n        return;\n      }\n\n      //if country code is among the ones we have access to, update our country\n      //code param, update user's location, and the search param of where they are\n      dispatch(updateCountryCode(countryCode));\n      dispatch({\n        type: types.FETCH_USER_LOCATION,\n        payload: `${city}, ${regionName}`,\n      });\n      dispatch(updateSearchParam(\"where\", `${city}, ${regionName}`));\n    } catch {\n      //if error in retrieving user's location, use los angeles for user's location and update that in the search param so we can make request.\n      // Default country code is \"us\", so we don't need to update that\n      dispatch({\n        type: types.FETCH_USER_LOCATION,\n        payload: \"Los Angeles, California\",\n      });\n      dispatch(updateSearchParam(\"where\", `Los Angeles, California`));\n    }\n  };\n};\n\nexport { fetchUserLocation };\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { BsClock } from \"react-icons/bs\";\nimport { FaGlobeAmericas } from \"react-icons/fa\";\n\nimport Header from \"../../components/Header/Header.js\";\nimport \"./index.scss\";\n\nconst DescriptionPage = (ownProps) => {\n  console.log(ownProps);\n  const jobSelected = useSelector((state) => state.jobSelected);\n\n  const {\n    companyName,\n    created,\n    description,\n    title,\n    jobLocation,\n    maxSalary,\n    minSalary,\n    redirectUrl,\n  } = jobSelected;\n\n  let contractTime;\n  if (jobSelected.contractTime === \"part_time\") {\n    contractTime = \"Part Time\";\n  } else if (jobSelected.contractTime === \"full_time\") {\n    contractTime = \"Full Time\";\n  }\n  const momentFromNow = moment(created).fromNow();\n  return (\n    <>\n      <Header />\n      <main className=\"DescriptionPage\">\n        <div className=\"container-2 DescriptionPage__container\">\n          <div className=\"DescriptionPage__main-content\">\n            <div className=\"DescriptionPage__title-date\">\n              <div className=\"DescriptionPage__header-contract\">\n                <h1 className=\"DescriptionPage__heading text-extra-large\">\n                  {title}\n                </h1>\n                {contractTime ? (\n                  <p className=\"text-medium DescriptionPage__contract\">\n                    {contractTime}\n                  </p>\n                ) : null}\n              </div>\n              <div className=\"DescriptionPage__time\">\n                <BsClock className=\"DescriptionPage__icon DescriptionPage__clock-icon\" />\n                <p className=\"text-small\">{momentFromNow}</p>\n              </div>\n            </div>\n            <div className=\"DescriptionPage__company-location\">\n              <p className=\" text-large DescriptionPage__company\">\n                {companyName}\n              </p>\n              <div className=\"DescriptionPage__location\">\n                <FaGlobeAmericas className=\"DescriptionPage__icon DescriptionPage__globe-icon\" />\n                <p className=\"text-small\">{jobLocation}</p>\n              </div>\n            </div>\n            <p className=\"text-regular-2 DescriptionPage__description\">\n              {`${description} (read more by applying on company site).`}\n            </p>\n            <div className=\"DescriptionPage__salaries\">\n              {minSalary ? (\n                <p className=\"text-regular-2 DescriptionPage__min-salary\">\n                  Min $:{\" \"}\n                  <span className=\"DescriptionPage__salary\">{minSalary}</span>\n                </p>\n              ) : null}\n              {maxSalary ? (\n                <p className=\"text-regular-2 DescriptionPage__max-salary\">\n                  Max $:{\" \"}\n                  <span className=\"DescriptionPage__salary\">{maxSalary}</span>\n                </p>\n              ) : null}\n            </div>\n          </div>\n          <div className=\"DescriptionPage__url\">\n            <a href={redirectUrl} target=\"_blank\" rel=\"noreferrer\">\n              <button className=\"button-4 button-4--primary text-medium DescriptionPage__button\">\n                Apply on company site\n              </button>\n            </a>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default DescriptionPage;\n","import React from \"react\";\nimport { Router, Route } from \"react-router-dom\";\nimport history from \"./history.js\";\n\nimport Homepage from \"./views/Homepage\";\nimport DescriptionPage from \"./views/DescriptionPage\";\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <Route path=\"/\" exact component={(props) => <Homepage {...props} />} />\n      <Route\n        path=\"/:page\"\n        exact\n        component={(props) => <Homepage {...props} />}\n      />\n      <Route\n        path=\"/jobs/:title+/:id\"\n        component={(props) => <DescriptionPage {...props} />}\n      />\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nimport combinedReducers from \"./reducers\";\nimport App from \"./App.js\";\nimport \"./styles/main.scss\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  combinedReducers,\n  composeEnhancers(applyMiddleware(ReduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}